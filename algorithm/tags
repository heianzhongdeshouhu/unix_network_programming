!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
MAX_LEN	queue.c	7;"	d	file:
Node	bucket_sort.c	/^typedef struct Node {$/;"	s	file:
PNode	bucket_sort.c	/^} lNode, *PNode;$/;"	t	typeref:struct:Node	file:
STACK_SIZE	stack.c	6;"	d	file:
add_and_resort_list	bucket_sort.c	/^int add_and_resort_list(lNode **pphead, lNode *pNewNode) {$/;"	f
add_to_list	bucket_sort.c	/^int add_to_list(lNode **pphead, float fval) {$/;"	f
binary_search_tree_node	chapter12/binary_search_tree.h	/^typedef struct binary_search_tree_node {$/;"	s
bstnode	chapter12/binary_search_tree.h	/^}bstnode, *pbstnode;$/;"	t	typeref:struct:binary_search_tree_node
bucket_sort	bucket_sort.c	/^int bucket_sort(float *parray, int num_elements) {$/;"	f
build_max_heap	heap_sort.c	/^int build_max_heap(int *p_heap, int len_heap) {$/;"	f
copy_value	bucket_sort.c	/^int copy_value(PNode *parray, int num_array, float *ptarget) {$/;"	f
counting_sort	counting_sort.c	/^int counting_sort(int *parray, int len_array, int imax, int *presult) {$/;"	f
create	geek_program/third.c	/^char* create(char B[], int lengthB, int n) {$/;"	f
dequeue	queue.c	/^int dequeue(qi *pqueue, int *pival) {$/;"	f
enqueue	queue.c	/^int enqueue(qi *pqueue, int ival) {$/;"	f
false	geek_program/third.c	6;"	d	file:
fun	quick_sort.c	/^int fun(int *parray, int istart, int iend) {$/;"	f
fval	bucket_sort.c	/^    float fval;$/;"	m	struct:Node	file:
getNumber	geek_program/first.c	/^int getNumber(int A[], int lengthA){$/;"	f
getNumber	geek_program/third.c	/^int getNumber(char A[], int lengthA, char B[], int lengthB){$/;"	f
heap_sort	heap_sort.c	/^int heap_sort(int *p_heap, int len_heap) {$/;"	f
iarray	queue.c	/^    int iarray[MAX_LEN];$/;"	m	struct:queue_info	file:
iarray	stack.c	/^    int iarray[STACK_SIZE];$/;"	m	struct:info_stack	file:
iend	queue.c	/^    int iend;$/;"	m	struct:queue_info	file:
info_stack	stack.c	/^typedef struct info_stack {$/;"	s	file:
inorder_tree_walk	chapter12/binary_search_tree.c	/^int inorder_tree_walk(bstnode *phead) {$/;"	f
insertion_sort	insertion_sort.c	/^int insertion_sort(int *pArray, int num) {$/;"	f
inum_items	queue.c	/^    int inum_items;$/;"	m	struct:queue_info	file:
isTrue	geek_program/third.c	/^int isTrue(char A[], int lengthA, char B[], int lengthB) {$/;"	f
istack	stack.c	/^}istack;$/;"	t	typeref:struct:info_stack	file:
istart	queue.c	/^    int istart;$/;"	m	struct:queue_info	file:
itop	stack.c	/^    int itop;$/;"	m	struct:info_stack	file:
ival	chapter12/binary_search_tree.h	/^    int ival;$/;"	m	struct:binary_search_tree_node
ival	list_10.2.c	/^    int ival;$/;"	m	struct:list_node	file:
ival	singly_linked_list.h	/^    int ival;$/;"	m	struct:singly_linked_list_node
lNode	bucket_sort.c	/^} lNode, *PNode;$/;"	t	typeref:struct:Node	file:
list_delete	list_10.2.c	/^int list_delete(lnode **ppl, int k) {$/;"	f
list_insert	list_10.2.c	/^int list_insert(lnode **ppl, int k) {$/;"	f
list_node	list_10.2.c	/^typedef struct list_node {$/;"	s	file:
list_print_values	bucket_sort.c	/^int list_print_values(PNode *parray, int num_array) {$/;"	f
list_print_values	list_10.2.c	/^int list_print_values(lnode *pl) {$/;"	f
list_search	list_10.2.c	/^int list_search(lnode *pl, int k, lnode **ppk) {$/;"	f
lnode	list_10.2.c	/^} lnode, *plnode;$/;"	t	typeref:struct:list_node	file:
main	bucket_sort.c	/^int main(int argc, char *argv[]) {$/;"	f
main	calloc_free_test.c	/^int main(int argc, char *argv[]) {$/;"	f
main	chapter12/12.1-3.c	/^int main(int argc, char *argv[]) {$/;"	f
main	chapter12/test.c	/^int main(int argc, char *argv[]) {$/;"	f
main	counting_sort.c	/^int main(int argc, char *argv[]) {$/;"	f
main	geek_program/first.c	/^int main(){$/;"	f
main	geek_program/third.c	/^int main(){$/;"	f
main	heap_sort.c	/^int main(int argc, char *argv[]) {$/;"	f
main	insertion_sort.c	/^int main(int argc, char *argv[]) {$/;"	f
main	list_10.2-7.c	/^int main(int argc, char *argv[]) {$/;"	f
main	list_10.2.c	/^int main(int argc, char *argv[]) { $/;"	f
main	merge_sort.c	/^int main(int argc, char *argv[]) {$/;"	f
main	pointer_test.c	/^int main(int argc, char *argv[]) {$/;"	f
main	queue.c	/^int main(int argc, char *argv[]) {$/;"	f
main	quick_sort.c	/^int main(int argc, char *argv[]) {$/;"	f
main	radix_sort_error.c	/^int main(int argc, char *argv[]) {$/;"	f
main	stack.c	/^int main (int argc, char *argv[]) {$/;"	f
max_heapify	heap_sort.c	/^int max_heapify(int len_heap, int *p_heap, int i) {$/;"	f
merge_array	merge_sort.c	/^int merge_array(int *pArrayA, int numA, int *pArrayB, int numB, int *pOutput, int numOutput)$/;"	f
merge_sort	merge_sort.c	/^int merge_sort(int *pInput, int numInput, int *pOutput, int nOutput)$/;"	f
partition	quick_sort.c	/^int partition(int *parray, int istart, int iend, int *presult) {$/;"	f
partition_ex	radix_sort_error.c	/^int partition_ex(int *parray, int istart, int iend, int *presult, int *ptarget) {$/;"	f
pbstnode	chapter12/binary_search_tree.h	/^}bstnode, *pbstnode;$/;"	t	typeref:struct:binary_search_tree_node
pleft	chapter12/binary_search_tree.h	/^    struct binary_search_tree_node *pleft;$/;"	m	struct:binary_search_tree_node	typeref:struct:binary_search_tree_node::binary_search_tree_node
plnode	list_10.2.c	/^} lnode, *plnode;$/;"	t	typeref:struct:list_node	file:
pnext	bucket_sort.c	/^    struct Node *pnext;$/;"	m	struct:Node	typeref:struct:Node::Node	file:
pnext	list_10.2.c	/^    struct list_node *pnext;$/;"	m	struct:list_node	typeref:struct:list_node::list_node	file:
pnext	singly_linked_list.h	/^    struct singly_linked_list_node *pnext;$/;"	m	struct:singly_linked_list_node	typeref:struct:singly_linked_list_node::singly_linked_list_node
pop	stack.c	/^int pop(istack *pstack, int *pival) {$/;"	f
pparent	chapter12/binary_search_tree.h	/^    struct binary_search_tree_node *pparent;$/;"	m	struct:binary_search_tree_node	typeref:struct:binary_search_tree_node::binary_search_tree_node
pprevious	list_10.2.c	/^    struct list_node *pprevious;$/;"	m	struct:list_node	typeref:struct:list_node::list_node	file:
pright	chapter12/binary_search_tree.h	/^    struct binary_search_tree_node *pright;$/;"	m	struct:binary_search_tree_node	typeref:struct:binary_search_tree_node::binary_search_tree_node
pslnode	singly_linked_list.h	/^} slnode, *pslnode;$/;"	t	typeref:struct:singly_linked_list_node
push	stack.c	/^int push(istack *pstack, int ival) {$/;"	f
qi	queue.c	/^}qi;$/;"	t	typeref:struct:queue_info	file:
queue_info	queue.c	/^typedef struct queue_info {$/;"	s	file:
queue_is_empty	queue.c	/^int queue_is_empty(qi *pqueue) {$/;"	f
queue_is_full	queue.c	/^int queue_is_full(qi *pqueue) {$/;"	f
quick_sort	quick_sort.c	/^int quick_sort(int *parray, int istart, int iend) {$/;"	f
quick_sort_ex	radix_sort_error.c	/^int quick_sort_ex(int *parray, int istart, int iend, int *ptarget) {$/;"	f
radix_sort	radix_sort_error.c	/^int radix_sort(int *parray, int num_array, int num_digit) {$/;"	f
singly_linked_list_node	singly_linked_list.h	/^typedef struct singly_linked_list_node {$/;"	s
sl_list_delete	singly_linked_list.c	/^int sl_list_delete(slnode **pphead, int ival) {$/;"	f
sl_list_insert	singly_linked_list.c	/^int sl_list_insert(slnode **pphead, int ival) {$/;"	f
sl_list_print	singly_linked_list.c	/^int sl_list_print(slnode *phead) {$/;"	f
sl_list_release	singly_linked_list.c	/^int sl_list_release(slnode *phead) {$/;"	f
sl_list_reverse	singly_linked_list.c	/^int sl_list_reverse(slnode **pphead) {$/;"	f
slnode	singly_linked_list.h	/^} slnode, *pslnode;$/;"	t	typeref:struct:singly_linked_list_node
sort_list	bucket_sort.c	/^int sort_list(lNode **pphead) {$/;"	f
split_array	merge_sort.c	/^int split_array(int *pInput, int numInput)$/;"	f
stack_empty	stack.c	/^int stack_empty(istack *pstack) {$/;"	f
stack_full	stack.c	/^int stack_full(istack *pstack) {$/;"	f
swap	heap_sort.c	/^int swap(int *pa, int *pb) {$/;"	f
swap	quick_sort.c	/^int swap(int *pa, int *pb) {$/;"	f
swap	radix_sort_error.c	/^int swap(int *pa, int *pb) {$/;"	f
tree_delete	chapter12/binary_search_tree.c	/^int tree_delete(bstnode **pphead, int ival) {$/;"	f
tree_insert	chapter12/binary_search_tree.c	/^int tree_insert(bstnode **pphead, int ival) {$/;"	f
tree_maximum	chapter12/binary_search_tree.c	/^int tree_maximum(bstnode *phead, bstnode **ppmaximum) {$/;"	f
tree_minimum	chapter12/binary_search_tree.c	/^int tree_minimum(bstnode *phead, bstnode **ppminimum) {$/;"	f
tree_search	chapter12/binary_search_tree.c	/^int tree_search(bstnode *phead, int ival, bstnode **pptarget) {$/;"	f
tree_successor	chapter12/binary_search_tree.c	/^int tree_successor(bstnode *pnode, bstnode **ppsuccessor_on_pnode) {$/;"	f
true	geek_program/third.c	5;"	d	file:
